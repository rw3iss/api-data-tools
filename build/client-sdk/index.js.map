{
  "version": 3,
  "sources": ["../../src/client-sdk/index.ts", "../../src/client-sdk/Request.ts", "../../src/client-sdk/HttpClient.ts", "../../src/client-sdk/APIClient.ts"],
  "sourcesContent": ["//require('dotenv').config();\n//import 'source-map-support/register';\nimport APIClient from './APIClient';\n\nexport { \n\n    APIClient\n\n};", "//const fetch = require('node-fetch').default;\n\nexport default class Request {\n    \n\tstatic async get(url, headers) {\n\t\tlet opts = {\n\t\t\tmode: 'cors',\n\t\t\tmethod: 'GET',\n\t\t\t// credentials: 'include',\n\t\t\theaders: headers,\n            redirect: 'follow'\n        }\n\n\t\treturn await fetch(url, opts)\n\t}\n\n\tstatic async post(url, data, headers) {\n\t\tlet opts = {\n\t\t\tmode: 'cors',\n\t\t\tbody: data ? JSON.stringify(data) : undefined,\n\t\t\tmethod: 'POST',\n\t\t\t// credentials: 'include',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t...headers\n\t\t\t},\n            redirect: 'follow'\n\t\t}\n\t\treturn await fetch(url, opts).catch(e => {\n\t\t\tconsole.log('caught request', e)\n\t\t})\n\t}\n\n\tstatic async put(url, data, headers) {\n\t\tlet opts = {\n\t\t\tmode: 'cors',\n\t\t\tbody: data ? JSON.stringify(data) : undefined,\n\t\t\tmethod: 'PUT',\n\t\t\t// credentials: 'include',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t...headers\n\t\t\t}\n\t\t}\n\t\treturn await fetch(url, opts)\n\t}\n\n\tstatic async delete(url, headers) {\n\t\tlet opts = {\n\t\t\tmethod: 'DELETE',\n\t\t\theaders: headers\n\t\t}\n\t\treturn await fetch(url, opts)\n\t}\n\n\t// Helper to extract error messaging from responses\n\tstatic findError(res) {\n\t\treturn res\n\t\t\t? res.error\n\t\t\t\t? res.error\n\t\t\t\t: res.message\n\t\t\t\t? res.message\n\t\t\t\t: 'An unknown error occurred.'\n\t\t\t: 'An unknown error occurred.'\n\t}\n}", "import Request from './Request';\n//import ErrorService from 'lib/services/ErrorService';\n\n// Todo: change body + headers arguments to opts: {} object.\nexport default class HttpClient {\n\n    // shortcuts\n    public get<T>(url, options) {\n        return this.request(url, 'GET', null, options.headers);\n    }\n    public post<T>(url, body, options) {\n        return this.request(url, 'POST', body, options.headers);\n    }\n    public put<T>(url, body, options) {\n        return this.request(url, 'PUT', body, options.headers);\n    }\n    public delete<T>(url, options) {\n        return this.request(url, 'DELETE', null, options.headers);\n    }\n\n    // underlying Request wrapper\n    private async request(url: string, method: string = 'GET', body: any = undefined, headers = undefined): Promise<any> {\n        return new Promise((resolve, reject) => {\n            let request;\n\n            switch (method.toLowerCase()) {\n                case 'get':\n                    request = Request.get(url, headers);\n                    break;\n                case 'post':\n                    request = Request.post(url, body, headers);\n                    break;\n                case 'put':\n                    request = Request.put(url, body, headers);\n                    break;\n                case 'delete':\n                    request = Request.delete(url, headers);\n                    break;\n                default:\n                    request = Request.get(url, headers);\n                    break;\n            }\n\n            request\n                .then(r => {\n                    // first see if an error was thrown\n                    if (!r.ok) {\n                        console.log('bad response')\n                        let handled = false;// ErrorService.handleError(r);\n                        if (!handled) {\n                            return reject(r);\n                        } else {\n                            return resolve(false);\n                        }\n                    }\n                    return r.text()\n                })\n                .then(text => {\n                    return text ? JSON.parse(text) : {};\n                })\n                .then(r => {\n                    return resolve(r);\n                })\n                .catch(e => {\n                    console.log('REQUEST ERROR', e)\n                    return reject(\"Failed to make request.\");\n                });\n        });\n\n    }\n\n}", "import HttpClient from './HttpClient';\n\n/* todo: \n    support extensions that can register their own routes, ie. an Auth exension\n    client.authExt.login(user, pass) // returns something...\n*/\n\nexport default class APIClient extends HttpClient {\n\n    apiBase;\n    options;\n\n    constructor(apiBase, options?) {\n        super();\n        if (!apiBase)\n            throw \"APIClient requires the base URI of the API as an argument.\";\n        // todo: load extensions from config...\n        this.apiBase = apiBase;\n        this.options = options;\n    }\n\n    /**\n     * @description Get an instance of the given type, according to parameters.\n     * @param {string} type\n     * @param {*} [params]      \n     * @param {*} [limit]\n     * @return {$type} Set of matching objects.\n     */\n    get = async (type: string, params?, limit?) => {\n        try {\n            let url = `${this.apiBase}/${type}${limit ? ('?limit=' + limit) : ''}`;\n            console.log('get', this.options)\n            return await super.get(url, this.options);\n        } catch (e) {\n            console.log('Client.get error', e)\n            throw e;\n        }\n    }\n\n    /**\n     * @description Gsets the first instance of returned set, or null if none found.\n     * @param {string} type\n     * @param {object} [params]\n     * @param {boolean} [serialize=false]\n     * @return {$type | null} The first result, or null if none found.\n     */\n    async getOne(type: string, params?: object, serialize: boolean = false) {\n        console.log('getone')\n        try {\n            let r = await this.get(type, params, 1);\n            return r.length ? r[0] : null;\n        } catch (e) {\n            console.log('Client.getOne error', e)\n            throw e;\n        }\n    }\n\n    /**\n     * @description Updates an object if it exists, or otherwise inserts a new one.\n     * @param {string} type\n     * @param {object} o\n     * @return {$type} Returns the new or updated object.\n     */\n    save = async (type: string, o: object) => {\n        console.log('save')\n        try {\n            let url = `${this.apiBase}/${type}`;\n            if (o.id) {\n                url += `/${o.id}`;\n                return await super.put(url, o, this.options);\n            } else {\n                return await super.post(url, o, this.options);\n            }\n        } catch (e) {\n            console.log('Client.save error', e)\n            throw e;\n        }\n    }\n\n    /** \n     * @description Deletes the object matching the parameters.\n     * @param {string} type\n     * @param {object} params\n     * @return {*} The delete result.\n     */\n    delete = async (type: string, params) => {\n        try {\n            console.log('delete >', type, params)\n            if (typeof params.id == 'undefined') throw \"delete requires an id parameter\";\n            let url = `${this.apiBase}/${type}/${params.id}`;\n            console.log('calling delete...', this.options)\n            return await super.delete(url, this.options);\n        } catch (e) {\n            console.log('Client.delete error', e);\n            throw e;\n        }\n    }\n\n}"],
  "mappings": "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",
  "names": []
}
